<?xml version="1.0"?>
<doc>
    <assembly>
        <name>MyRecipeBackend</name>
    </assembly>
    <members>
        <member name="M:MyRecipeBackend.Controllers.AuthController.Login(MyRecipeBackend.Models.LoginModel)">
            <summary>
            Login endpoint for a user, Default users: test1@test.test and test2@test.test, Pw: Pass123$
            </summary>
            <param name="model"></param>
            <returns>accessToken, refreshToken</returns>
        </member>
        <member name="M:MyRecipeBackend.Controllers.AuthController.Register(MyRecipeBackend.Models.LoginModel)">
            <summary>
            Register a new user
            </summary>
            <param name="loginModel"></param>
            <returns></returns>
        </member>
        <member name="M:MyRecipeBackend.Controllers.AuthController.ConfirmEmail(System.String,System.String)">
            <summary>
            Called to confirm a users email
            </summary>
            <param name="userId"></param>
            <param name="code"></param>
            <returns></returns>
        </member>
        <member name="M:MyRecipeBackend.Controllers.AuthController.ChangePassword(MyRecipeBackend.Models.ChangePasswordModel)">
            <summary>
            Change a users password (has to be logged in)
            </summary>
            <param name="model"></param>
            <returns></returns>
        </member>
        <member name="M:MyRecipeBackend.Controllers.AuthController.ResetPassword(System.String)">
            <summary>
            Request the reset of a users password (via email)
            </summary>
            <param name="email"></param>
            <returns></returns>
        </member>
        <member name="M:MyRecipeBackend.Controllers.AuthController.ResetPassword(MyRecipeBackend.Models.ResetPasswordConfirmModel)">
            <summary>
            Confirm reset of a users password
            </summary>
            <param name="model"></param>
            <returns></returns>
        </member>
        <member name="M:MyRecipeBackend.Controllers.AuthController.ChangeEmail(System.String)">
            <summary>
            Request the change of email for a user (has to be logged in)
            </summary>
            <param name="newEmail"></param>
            <returns></returns>
        </member>
        <member name="M:MyRecipeBackend.Controllers.AuthController.ChangeEmail(MyRecipeBackend.ViewModels.ResetEmailViewModel)">
            <summary>
            Confirm the change of a users email
            </summary>
            <param name="viewModel"></param>
            <returns></returns>
        </member>
        <member name="M:MyRecipeBackend.Controllers.AuthController.Refresh(MyRecipeBackend.Models.RefreshModel)">
            <summary>
            Exchange refresh tokens for a new access token
            </summary>
            <param name="model"></param>
            <returns></returns>
        </member>
        <member name="M:MyRecipeBackend.Controllers.ChangeEmailController.RequestChangeEmail(System.String)">
            <summary>
            Request the change of email for a user (has to be logged in)
            </summary>
            <param name="newEmail"></param>
            <returns></returns>
        </member>
        <member name="M:MyRecipeBackend.Controllers.ChangeEmailController.ChangeEmail(MyRecipeBackend.ViewModels.ResetEmailViewModel)">
            <summary>s
            Confirm the change of a users email
            </summary>
            <param name="viewModel"></param>
            <returns></returns>
        </member>
        <member name="M:MyRecipeBackend.Controllers.GroupController.CreateGroup(MyRecipeBackend.Models.Group.CreateGroupModel)">
            <summary>
            Create a new group
            </summary>
            <param name="input">Name of the new group</param>
            <returns>group</returns>
        </member>
        <member name="M:MyRecipeBackend.Controllers.GroupController.GetGroup">
            <summary>
            Get group for user
            </summary>
            <returns>Group for the loggend in user</returns>
        </member>
        <member name="M:MyRecipeBackend.Controllers.InviteCodeController.CreateInviteCode">
            <summary>
            Create a new invite code for the group the user is in
            </summary>
            <returns></returns>
        </member>
        <member name="M:MyRecipeBackend.Controllers.InviteCodeController.AcceptInvite(System.String)">
            <summary>
            Accept an invite code in order to join group
            </summary>
            <param name="inviteCode"></param>
            <returns></returns>
        </member>
        <member name="M:MyRecipeBackend.Controllers.MealplanController.GetPlannedMeals">
            <summary>
            Get all the meals that have been accepted
            </summary>
            <returns></returns>
        </member>
        <member name="M:MyRecipeBackend.Controllers.MealplanController.GetMealById(System.Guid)">
            <summary>
            Get a meal by its id (has to be owned by the users group of course).
            Does not matter if it is accepted or not
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:MyRecipeBackend.Controllers.MealplanController.AcceptMealById(System.Guid,System.Boolean)">
            <summary>
            Accept a meal as an admin (probably the one with the highest vote count
            </summary>
            <param name="mealId"></param>
            <param name="accepted"></param>
            <returns></returns>
        </member>
        <member name="M:MyRecipeBackend.Controllers.MealplanController.DeleteMeal(System.Guid)">
            <summary>
            Delete a meal as an admin (doesnt matter if it is accepted or not)
            </summary>
            <param name="id">Id of the meal to delete</param>
            <returns></returns>
        </member>
        <member name="M:MyRecipeBackend.Controllers.MealProposeController.ProposeMeal(MyRecipeBackend.Models.Mealplan.ProposeInputModel)">
            <summary>
            Propose a recipe to be used in the selection process
            </summary>
            <param name="model"></param>
            <returns></returns>
        </member>
        <member name="M:MyRecipeBackend.Controllers.MealProposeController.GetProposedMeals">
            <summary>
            Gets all the meals that have been proposed but not accepted
            </summary>
            <returns></returns>
        </member>
        <member name="M:MyRecipeBackend.Controllers.MealRecommendationController.GetRecommendedMeal(MyRecipeBackend.Models.RecommendMealRequestModel)">
            <summary>
            Get random recommendations of what to eat based on the entire recipes of a group
            </summary>
            <param name="requestModel"></param>
            <returns></returns>
        </member>
        <member name="M:MyRecipeBackend.Controllers.MealVoteController.VoteMeal(MyRecipeBackend.Models.Mealplan.VoteRequestModel)">
            <summary>
            Vote for a meal that has been proposed
            </summary>
            <param name="voteRequestModel"></param>
            <returns></returns>
        </member>
        <member name="M:MyRecipeBackend.Controllers.RecipesController.CreateRecipe(MyRecipeBackend.Models.RecipeModel)">
            <summary>
            Add a recipe to the users cookbook
            </summary>
            <param name="recipeModel"></param>
            <returns></returns>
        </member>
        <member name="M:MyRecipeBackend.Controllers.RecipesController.UpdateRecipe(System.Guid,MyRecipeBackend.Models.RecipeModel)">
            <summary>
            Update a users recipe
            </summary>
            <param name="id"></param>
            <param name="recipeModel"></param>
            <returns></returns>
        </member>
        <member name="M:MyRecipeBackend.Controllers.RecipesController.GetPaged(System.String,System.Int32,System.Int32)">
            <summary>
            Get recipes for user with paging
            </summary>
            <param name="filter">Filters by name of recipes</param>
            <param name="page"></param>
            <param name="pageSize"></param>
            <returns></returns>
        </member>
        <member name="M:MyRecipeBackend.Controllers.RecipesController.DeleteRecipe(System.Guid)">
            <summary>
            Delete a users recipe
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:MyRecipeBackend.Controllers.RecipesController.UploadImage(Microsoft.AspNetCore.Http.IFormFile)">
            <summary>
            Upload a image
            </summary>
            <param name="image"></param>
            <returns>Path to the image file</returns>
        </member>
        <member name="M:MyRecipeBackend.Controllers.ResetPasswordController.RequestResetPassword(System.String)">
            <summary>
            Request the reset of a users password (via email)
            </summary>
            <param name="email"></param>
            <returns></returns>
        </member>
        <member name="M:MyRecipeBackend.Controllers.ResetPasswordController.ResetPassword(MyRecipeBackend.Models.ResetPasswordViewModel)">
            <summary>
            Confirm reset of a users password
            </summary>
            <param name="model"></param>
            <returns></returns>
        </member>
        <member name="M:MyRecipeBackend.Controllers.UserController.LeaveGroup">
            <summary>
            Leave the group the user is currently in
            </summary>
            <returns></returns>
        </member>
        <member name="M:MyRecipeBackend.Controllers.UserController.UpdateMembership(MyRecipeBackend.Models.User.UpdateUserModel)">
            <summary>
            Change a users admin status and/or kick him from a group (user has to be the admin of the group)
            </summary>
            <param name="model"></param>
            <returns></returns>
        </member>
        <member name="M:MyRecipeBackend.Startup.ConfigureServices(Microsoft.Extensions.DependencyInjection.IServiceCollection)">
            <summary>
            This method gets called by the runtime. Use this method to add services to the container.
            </summary>
            <param name="services"></param>
        </member>
    </members>
</doc>
