# This is a basic workflow to help you get started with Actions

name: CI

# Controls when the action will run. 
on:
  # Triggers the workflow on push or pull request events but only for the master branch
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:

        
  build:
    env:
      KEY_P12: ${{ secrets.KEY_P12 }}
      KEY_JKS: ${{ secrets.KEY_JKS }}
      KEYSTORE_PASSWORD: ${{ secrets.KEYSTORE_PASSWORD }}
      ALIAS_PASSWORD: ${{ secrets.ALIAS_PASSWORD }}
    defaults:
      run:
        working-directory: myrecipes_flutter
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:      
      - uses: actions/checkout@v2
      - name: Setup Java
        uses: actions/setup-java@v1
        with:
          java-version: '15'
        
      - uses: subosito/flutter-action@v1
        with:
          channel: 'beta'
      - run: flutter upgrade
      - run: flutter doctor
      - run: flutter pub get
      - run: flutter test
        continue-on-error: true
      - run: echo "${{ secrets.KEY_JKS }}" > key.jks.base64.txt
      - run: openssl base64 -in key.jks.base64.txt -out android/app/key.jks -d
      - name: Check keystore
        run: sha256sum android/app/key.jks
      - name: Create key.properties
        run: |
          echo storePassword=$KEYSTORE_PASSWORD > android/key.properties
          echo keyPassword=$ALIAS_PASSWORD >> android/key.properties
          echo keyAlias=release >> android/key.properties
          echo storeFile=key.jks >> android/key.properties
      - name: Build APK
        run: flutter build apk --release --no-tree-shake-icons --verbose --dart-define=ENVIRONMENT=Production --dart-define=API_BASE_URL=https://vm133.htl-leonding.ac.at
        
      - name: Upload Artifact
        uses: actions/upload-artifact@v1
        with:
          name: release-apk
          path: myrecipes_flutter/build/app/outputs/flutter-apk/app-release.apk
          
      - name: Bump version and push tag
        id: tag_version
        if: ${{ github.event_name != 'pull_request' }}
        uses: mathieudutour/github-tag-action@v5
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
        
      - name: Create Release
        id: create_release
        if: ${{ github.event_name != 'pull_request' }}
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} # This token is provided by Actions, you do not need to create your own token
        with:
          tag_name: ${{ steps.tag_version.outputs.new_tag }}
          release_name: Release ${{ steps.tag_version.outputs.new_tag }}
          body: ${{ github.event.head_commit.message }}
          draft: false
          prerelease: true
      - name: Upload Release Asset
        if: ${{ github.event_name != 'pull_request' }}
        id: upload-release-asset 
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps 
          asset_path: /home/runner/work/MyRecipesReworked/MyRecipesReworked/myrecipes_flutter/build/app/outputs/flutter-apk/app-release.apk
          asset_name: MyRecipe.apk
          asset_content_type: application/octet-stream
